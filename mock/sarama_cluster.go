// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-kafka"
	"github.com/bsm/sarama-cluster"
	"sync"
)

var (
	lockSaramaClusterMockNewClient             sync.RWMutex
	lockSaramaClusterMockNewConsumerFromClient sync.RWMutex
)

// Ensure, that SaramaClusterMock does implement kafka.SaramaCluster.
// If this is not the case, regenerate this file with moq.
var _ kafka.SaramaCluster = &SaramaClusterMock{}

// SaramaClusterMock is a mock implementation of kafka.SaramaCluster.
//
//     func TestSomethingThatUsesSaramaCluster(t *testing.T) {
//
//         // make and configure a mocked kafka.SaramaCluster
//         mockedSaramaCluster := &SaramaClusterMock{
//             NewClientFunc: func(addrs []string, config *cluster.Config) (*cluster.Client, error) {
// 	               panic("mock out the NewClient method")
//             },
//             NewConsumerFromClientFunc: func(client *cluster.Client, groupID string, topics []string) (kafka.SaramaClusterConsumer, error) {
// 	               panic("mock out the NewConsumerFromClient method")
//             },
//         }
//
//         // use mockedSaramaCluster in code that requires kafka.SaramaCluster
//         // and then make assertions.
//
//     }
type SaramaClusterMock struct {
	// NewClientFunc mocks the NewClient method.
	NewClientFunc func(addrs []string, config *cluster.Config) (*cluster.Client, error)

	// NewConsumerFromClientFunc mocks the NewConsumerFromClient method.
	NewConsumerFromClientFunc func(client *cluster.Client, groupID string, topics []string) (kafka.SaramaClusterConsumer, error)

	// calls tracks calls to the methods.
	calls struct {
		// NewClient holds details about calls to the NewClient method.
		NewClient []struct {
			// Addrs is the addrs argument value.
			Addrs []string
			// Config is the config argument value.
			Config *cluster.Config
		}
		// NewConsumerFromClient holds details about calls to the NewConsumerFromClient method.
		NewConsumerFromClient []struct {
			// Client is the client argument value.
			Client *cluster.Client
			// GroupID is the groupID argument value.
			GroupID string
			// Topics is the topics argument value.
			Topics []string
		}
	}
}

// NewClient calls NewClientFunc.
func (mock *SaramaClusterMock) NewClient(addrs []string, config *cluster.Config) (*cluster.Client, error) {
	if mock.NewClientFunc == nil {
		panic("SaramaClusterMock.NewClientFunc: method is nil but SaramaCluster.NewClient was just called")
	}
	callInfo := struct {
		Addrs  []string
		Config *cluster.Config
	}{
		Addrs:  addrs,
		Config: config,
	}
	lockSaramaClusterMockNewClient.Lock()
	mock.calls.NewClient = append(mock.calls.NewClient, callInfo)
	lockSaramaClusterMockNewClient.Unlock()
	return mock.NewClientFunc(addrs, config)
}

// NewClientCalls gets all the calls that were made to NewClient.
// Check the length with:
//     len(mockedSaramaCluster.NewClientCalls())
func (mock *SaramaClusterMock) NewClientCalls() []struct {
	Addrs  []string
	Config *cluster.Config
} {
	var calls []struct {
		Addrs  []string
		Config *cluster.Config
	}
	lockSaramaClusterMockNewClient.RLock()
	calls = mock.calls.NewClient
	lockSaramaClusterMockNewClient.RUnlock()
	return calls
}

// NewConsumerFromClient calls NewConsumerFromClientFunc.
func (mock *SaramaClusterMock) NewConsumerFromClient(client *cluster.Client, groupID string, topics []string) (kafka.SaramaClusterConsumer, error) {
	if mock.NewConsumerFromClientFunc == nil {
		panic("SaramaClusterMock.NewConsumerFromClientFunc: method is nil but SaramaCluster.NewConsumerFromClient was just called")
	}
	callInfo := struct {
		Client  *cluster.Client
		GroupID string
		Topics  []string
	}{
		Client:  client,
		GroupID: groupID,
		Topics:  topics,
	}
	lockSaramaClusterMockNewConsumerFromClient.Lock()
	mock.calls.NewConsumerFromClient = append(mock.calls.NewConsumerFromClient, callInfo)
	lockSaramaClusterMockNewConsumerFromClient.Unlock()
	return mock.NewConsumerFromClientFunc(client, groupID, topics)
}

// NewConsumerFromClientCalls gets all the calls that were made to NewConsumerFromClient.
// Check the length with:
//     len(mockedSaramaCluster.NewConsumerFromClientCalls())
func (mock *SaramaClusterMock) NewConsumerFromClientCalls() []struct {
	Client  *cluster.Client
	GroupID string
	Topics  []string
} {
	var calls []struct {
		Client  *cluster.Client
		GroupID string
		Topics  []string
	}
	lockSaramaClusterMockNewConsumerFromClient.RLock()
	calls = mock.calls.NewConsumerFromClient
	lockSaramaClusterMockNewConsumerFromClient.RUnlock()
	return calls
}
