// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-kafka"
	"github.com/Shopify/sarama"
	"sync"
)

var (
	lockSaramaMockNewAsyncProducerFromClient sync.RWMutex
	lockSaramaMockNewClient                  sync.RWMutex
	lockSaramaMockNewConsumerGroupFromClient sync.RWMutex
)

// Ensure, that SaramaMock does implement kafka.Sarama.
// If this is not the case, regenerate this file with moq.
var _ kafka.Sarama = &SaramaMock{}

// SaramaMock is a mock implementation of kafka.Sarama.
//
//     func TestSomethingThatUsesSarama(t *testing.T) {
//
//         // make and configure a mocked kafka.Sarama
//         mockedSarama := &SaramaMock{
//             NewAsyncProducerFromClientFunc: func(client sarama.Client) (sarama.AsyncProducer, error) {
// 	               panic("mock out the NewAsyncProducerFromClient method")
//             },
//             NewClientFunc: func(addrs []string, conf *sarama.Config) (sarama.Client, error) {
// 	               panic("mock out the NewClient method")
//             },
//             NewConsumerGroupFromClientFunc: func(groupID string, client sarama.Client) (sarama.ConsumerGroup, error) {
// 	               panic("mock out the NewConsumerGroupFromClient method")
//             },
//         }
//
//         // use mockedSarama in code that requires kafka.Sarama
//         // and then make assertions.
//
//     }
type SaramaMock struct {
	// NewAsyncProducerFromClientFunc mocks the NewAsyncProducerFromClient method.
	NewAsyncProducerFromClientFunc func(client sarama.Client) (sarama.AsyncProducer, error)

	// NewClientFunc mocks the NewClient method.
	NewClientFunc func(addrs []string, conf *sarama.Config) (sarama.Client, error)

	// NewConsumerGroupFromClientFunc mocks the NewConsumerGroupFromClient method.
	NewConsumerGroupFromClientFunc func(groupID string, client sarama.Client) (sarama.ConsumerGroup, error)

	// calls tracks calls to the methods.
	calls struct {
		// NewAsyncProducerFromClient holds details about calls to the NewAsyncProducerFromClient method.
		NewAsyncProducerFromClient []struct {
			// Client is the client argument value.
			Client sarama.Client
		}
		// NewClient holds details about calls to the NewClient method.
		NewClient []struct {
			// Addrs is the addrs argument value.
			Addrs []string
			// Conf is the conf argument value.
			Conf *sarama.Config
		}
		// NewConsumerGroupFromClient holds details about calls to the NewConsumerGroupFromClient method.
		NewConsumerGroupFromClient []struct {
			// GroupID is the groupID argument value.
			GroupID string
			// Client is the client argument value.
			Client sarama.Client
		}
	}
}

// NewAsyncProducerFromClient calls NewAsyncProducerFromClientFunc.
func (mock *SaramaMock) NewAsyncProducerFromClient(client sarama.Client) (sarama.AsyncProducer, error) {
	if mock.NewAsyncProducerFromClientFunc == nil {
		panic("SaramaMock.NewAsyncProducerFromClientFunc: method is nil but Sarama.NewAsyncProducerFromClient was just called")
	}
	callInfo := struct {
		Client sarama.Client
	}{
		Client: client,
	}
	lockSaramaMockNewAsyncProducerFromClient.Lock()
	mock.calls.NewAsyncProducerFromClient = append(mock.calls.NewAsyncProducerFromClient, callInfo)
	lockSaramaMockNewAsyncProducerFromClient.Unlock()
	return mock.NewAsyncProducerFromClientFunc(client)
}

// NewAsyncProducerFromClientCalls gets all the calls that were made to NewAsyncProducerFromClient.
// Check the length with:
//     len(mockedSarama.NewAsyncProducerFromClientCalls())
func (mock *SaramaMock) NewAsyncProducerFromClientCalls() []struct {
	Client sarama.Client
} {
	var calls []struct {
		Client sarama.Client
	}
	lockSaramaMockNewAsyncProducerFromClient.RLock()
	calls = mock.calls.NewAsyncProducerFromClient
	lockSaramaMockNewAsyncProducerFromClient.RUnlock()
	return calls
}

// NewClient calls NewClientFunc.
func (mock *SaramaMock) NewClient(addrs []string, conf *sarama.Config) (sarama.Client, error) {
	if mock.NewClientFunc == nil {
		panic("SaramaMock.NewClientFunc: method is nil but Sarama.NewClient was just called")
	}
	callInfo := struct {
		Addrs []string
		Conf  *sarama.Config
	}{
		Addrs: addrs,
		Conf:  conf,
	}
	lockSaramaMockNewClient.Lock()
	mock.calls.NewClient = append(mock.calls.NewClient, callInfo)
	lockSaramaMockNewClient.Unlock()
	return mock.NewClientFunc(addrs, conf)
}

// NewClientCalls gets all the calls that were made to NewClient.
// Check the length with:
//     len(mockedSarama.NewClientCalls())
func (mock *SaramaMock) NewClientCalls() []struct {
	Addrs []string
	Conf  *sarama.Config
} {
	var calls []struct {
		Addrs []string
		Conf  *sarama.Config
	}
	lockSaramaMockNewClient.RLock()
	calls = mock.calls.NewClient
	lockSaramaMockNewClient.RUnlock()
	return calls
}

// NewConsumerGroupFromClient calls NewConsumerGroupFromClientFunc.
func (mock *SaramaMock) NewConsumerGroupFromClient(groupID string, client sarama.Client) (sarama.ConsumerGroup, error) {
	if mock.NewConsumerGroupFromClientFunc == nil {
		panic("SaramaMock.NewConsumerGroupFromClientFunc: method is nil but Sarama.NewConsumerGroupFromClient was just called")
	}
	callInfo := struct {
		GroupID string
		Client  sarama.Client
	}{
		GroupID: groupID,
		Client:  client,
	}
	lockSaramaMockNewConsumerGroupFromClient.Lock()
	mock.calls.NewConsumerGroupFromClient = append(mock.calls.NewConsumerGroupFromClient, callInfo)
	lockSaramaMockNewConsumerGroupFromClient.Unlock()
	return mock.NewConsumerGroupFromClientFunc(groupID, client)
}

// NewConsumerGroupFromClientCalls gets all the calls that were made to NewConsumerGroupFromClient.
// Check the length with:
//     len(mockedSarama.NewConsumerGroupFromClientCalls())
func (mock *SaramaMock) NewConsumerGroupFromClientCalls() []struct {
	GroupID string
	Client  sarama.Client
} {
	var calls []struct {
		GroupID string
		Client  sarama.Client
	}
	lockSaramaMockNewConsumerGroupFromClient.RLock()
	calls = mock.calls.NewConsumerGroupFromClient
	lockSaramaMockNewConsumerGroupFromClient.RUnlock()
	return calls
}
